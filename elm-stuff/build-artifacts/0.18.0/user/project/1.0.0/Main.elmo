var _user$project$Main$checkPlay = F3(
	function (model, id, play) {
		return _elm_lang$core$Native_Utils.eq(play.playerId, id) ? _elm_lang$core$Native_Utils.update(
			play,
			{name: model.playerName}) : play;
	});
var _user$project$Main$checkPlayer = F3(
	function (model, id, player) {
		return _elm_lang$core$Native_Utils.eq(player.id, id) ? _elm_lang$core$Native_Utils.update(
			player,
			{name: model.playerName}) : player;
	});
var _user$project$Main$edit = F2(
	function (model, id) {
		var newPlays = A2(
			_elm_lang$core$List$map,
			A2(_user$project$Main$checkPlay, model, id),
			model.plays);
		var newPlayers = A2(
			_elm_lang$core$List$map,
			A2(_user$project$Main$checkPlayer, model, id),
			model.players);
		return _elm_lang$core$Native_Utils.update(
			model,
			{players: newPlayers, plays: newPlays, playerName: '', playerId: _elm_lang$core$Maybe$Nothing});
	});
var _user$project$Main$initModel = {
	players: {ctor: '[]'},
	playerName: '',
	playerId: _elm_lang$core$Maybe$Nothing,
	plays: {ctor: '[]'}
};
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {players: a, playerName: b, playerId: c, plays: d};
	});
var _user$project$Main$Player = F3(
	function (a, b, c) {
		return {id: a, name: b, points: c};
	});
var _user$project$Main$add = function (model) {
	var player = A3(
		_user$project$Main$Player,
		_elm_lang$core$List$length(model.players),
		model.playerName,
		0);
	var newPlayers = {ctor: '::', _0: player, _1: model.players};
	return _elm_lang$core$Native_Utils.update(
		model,
		{players: newPlayers, playerName: ''});
};
var _user$project$Main$save = function (model) {
	var _p0 = model.playerId;
	if (_p0.ctor === 'Just') {
		return A2(_user$project$Main$edit, model, _p0._0);
	} else {
		return _user$project$Main$add(model);
	}
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Input':
				return _elm_lang$core$Native_Utils.update(
					model,
					{playerName: _p1._0});
			case 'Cancel':
				return _elm_lang$core$Native_Utils.update(
					model,
					{playerName: '', playerId: _elm_lang$core$Maybe$Nothing});
			case 'Save':
				return _elm_lang$core$String$isEmpty(model.playerName) ? model : _user$project$Main$save(model);
			default:
				return model;
		}
	});
var _user$project$Main$Play = F4(
	function (a, b, c, d) {
		return {id: a, playerId: b, name: c, points: d};
	});
var _user$project$Main$DeletePlay = function (a) {
	return {ctor: 'DeletePlay', _0: a};
};
var _user$project$Main$Cancel = {ctor: 'Cancel'};
var _user$project$Main$Save = {ctor: 'Save'};
var _user$project$Main$Input = function (a) {
	return {ctor: 'Input', _0: a};
};
var _user$project$Main$playerForm = function (model) {
	return A2(
		_elm_lang$html$Html$form,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onSubmit(_user$project$Main$Save),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Add/Edit Player . . .'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Input),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value(model.playerName),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('submit'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Save'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('button'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Cancel),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Cancel'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('scoreboard'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Score Keeper'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$Main$playerForm(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$Main$initModel, view: _user$project$Main$view, update: _user$project$Main$update})();
var _user$project$Main$Score = F2(
	function (a, b) {
		return {ctor: 'Score', _0: a, _1: b};
	});
var _user$project$Main$Edit = function (a) {
	return {ctor: 'Edit', _0: a};
};
